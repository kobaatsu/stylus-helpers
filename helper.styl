autoUnit()
  arg = ''
  for val, i in arguments
    if i > 0
      arg += ' '
    if type(val) is 'unit'
      if unit(val) is ''
        arg += val px
      else
        arg += val
    else
      arg += val

  return unquote(arg)

size = {
  xs: 767
  sm: 991
  md: 1199
  lg: Infinity
}

xs(obj = null)
  @media (max-width: autoUnit(size.xs))
    {block}
    if obj
      for key, val in obj
        {key} autoUnit(val)

sm(obj = null)
  @media (min-width: autoUnit(size.xs + 1)) and (max-width: autoUnit(size.sm))
    {block}
    if obj
      for key, val in obj
        {key} autoUnit(val)

md(obj = null)
  @media (min-width: autoUnit(size.sm + 1)) and (max-width: autoUnit(size.md))
    {block}
    if obj
      for key, val in obj
        {key} autoUnit(val)

lg(obj = null)
  @media (min-width: autoUnit(size.md + 1))
    {block}
    if obj
      for key, val in obj
        {key} autoUnit(val)

xs-sm(obj = null)
  @media (max-width: autoUnit(size.sm))
    {block}
    if obj
      for key, val in obj
        {key} autoUnit(val)

xs-md(obj = null)
  @media (max-width: autoUnit(size.md))
    {block}
    if obj
      for key, val in obj
        {key} autoUnit(val)

sm-md(obj = null)
  @media (min-width: autoUnit(size.xs + 1)) and (max-width: autoUnit(size.sm))
    {block}
    if obj
      for key, val in obj
        {key} autoUnit(val)

sm-lg(obj = null)
  @media (min-width: autoUnit(size.xs + 1))
    {block}
    if obj
      for key, val in obj
        {key} autoUnit(val)

md-lg(obj = null)
  @media (min-width: autoUnit(size.sm + 1))
    {block}
    if obj
      for key, val in obj
        {key} autoUnit(val)

bgi()
  background-image arguments
bgi-xs()
  +xs()
    bgi(arguments)
bgi-sm()
  +sm()
    bgi(arguments)
bgi-md()
  +md()
    bgi(arguments)
bgi-lg()
  +lg()
    bgi(arguments)

bgsz()
  background-size autoUnit(arguments)
bgsz-xs()
  +xs()
    bgsz(arguments)
bgsz-sm()
  +sm()
    bgsz(arguments)
bgsz-md()
  +md()
    bgsz(arguments)
bgsz-lg()
  +lg()
    bgsz(arguments)

bgn()
  background none
bgn-xs()
  +xs()
    bgn()
bgn-sm()
  +sm()
    bgn()
bgn-md()
  +md()
    bgn()
bgn-lg()
  +lg()
    bgn()

bdb()
  border-bottom autoUnit(arguments)
bdb-xs()
  +xs()
    bdb(arguments)
bdb-sm()
  +sm()
    bdb(arguments)
bdb-md()
  +md()
    bdb(arguments)
bdb-lg()
  +lg()
    bdb(arguments)

bdc()
  border-color arguments
bdc-xs()
  +xs()
    bdc(arguments)
bdc-sm()
  +sm()
    bdc(arguments)
bdc-md()
  +md()
    bdc(arguments)
bdc-lg()
  +lg()
    bdc(arguments)

bdl()
  border-left autoUnit(arguments)
bdl-xs()
  +xs()
    bdl(arguments)
bdl-sm()
  +sm()
    bdl(arguments)
bdl-md()
  +md()
    bdl(arguments)
bdl-lg()
  +lg()
    bdl(arguments)

bdr()
  border-right autoUnit(arguments)
bdr-xs()
  +xs()
    bdr(arguments)
bdr-sm()
  +sm()
    bdr(arguments)
bdr-md()
  +md()
    bdr(arguments)
bdr-lg()
  +lg()
    bdr(arguments)

bds(arguments)
  if arguments
    border-style arguments
  else
    border-style solid
bds-xs()
  +xs()
    bds(arguments)
bds-sm()
  +sm()
    bds(arguments)
bds-md()
  +md()
    bds(arguments)
bds-lg()
  +lg()
    bds(arguments)

bdt()
  border-top autoUnit(arguments)
bdt-xs()
  +xs()
    bdt(arguments)
bdt-sm()
  +sm()
    bdt(arguments)
bdt-md()
  +md()
    bdt(arguments)
bdt-lg()
  +lg()
    bdt(arguments)

bdw()
  border-width autoUnit(arguments)
bdw-xs()
  +xs()
    bdw(arguments)
bdw-sm()
  +sm()
    bdw(arguments)
bdw-md()
  +md()
    bdw(arguments)
bdw-lg()
  +lg()
    bdw(arguments)

bd()
  border autoUnit(arguments)
bd-xs()
  +xs()
    bd(arguments)
bd-sm()
  +sm()
    bd(arguments)
bd-md()
  +md()
    bd(arguments)
bd-lg()
  +lg()
    bd(arguments)

b(val = auto)
  bottom autoUnit(val)
b-xs(val = auto)
  +xs()
    b(val)
b-sm(val = auto)
  +sm()
    b(val)
b-md(val = auto)
  +md()
    b(val)
b-lg(val = auto)
  +lg()
    b(val)

clb()
  clear both
clb-xs()
  +xs()
    clb()
clb-sm()
  +sm()
    clb()
clb-md()
  +md()
    clb()
clb-lg()
  +lg()
    clb()

cll()
  clear left
cll-xs()
  +xs()
    cll()
cll-sm()
  +sm()
    cll()
cll-md()
  +md()
    cll()
cll-lg()
  +lg()
    cll()

clr()
  clear right
clr-xs()
  +xs()
    clr()
clr-sm()
  +sm()
    clr()
clr-md()
  +md()
    clr()
clr-lg()
  +lg()
    clr()

cn(content = none)
  content content
cn-xs(content = none)
  +xs()
    cn(content)
cn-sm(content = none)
  +sm()
    cn(content)
cn-md(content = none)
  +md()
    cn(content)
cn-lg(content = none)
  +lg()
    cn(content)

db()
  display block
db-xs()
  +xs()
    db()
db-sm()
  +sm()
    db()
db-md()
  +md()
    db()
db-lg()
  +lg()
    db()

df()
  display flex
df-xs()
  +xs()
    df()
df-sm()
  +sm()
    df()
df-md()
  +md()
    df()
df-lg()
  +lg()
    df()

dib()
  display inline-block
dib-xs()
  +xs()
    dib()
dib-sm()
  +sm()
    dib()
dib-md()
  +md()
    dib()
dib-lg()
  +lg()
    dib()

di()
  display inline
di-xs()
  +xs()
    di()
di-sm()
  +sm()
    di()
di-md()
  +md()
    di()
di-lg()
  +lg()
    di()

dn()
  display none
dn-xs()
  +xs()
    dn()
dn-sm()
  +sm()
    dn()
dn-md()
  +md()
    dn()
dn-lg()
  +lg()
    dn()

fll()
  float left
fll-xs()
  +xs()
    fll()
fll-sm()
  +sm()
    fll()
fll-md()
  +md()
    fll()
fll-lg()
  +lg()
    fll()

fln()
  float none
fln-xs()
  +xs()
    fln()
fln-sm()
  +sm()
    fln()
fln-md()
  +md()
    fln()
fln-lg()
  +lg()
    fln()

flr()
  float right
flr-xs()
  +xs()
    flr()
flr-sm()
  +sm()
    flr()
flr-md()
  +md()
    flr()
flr-lg()
  +lg()
    flr()

fz(size)
  font-size autoUnit(size)
fz-xs(size)
  +xs()
    fz(size)
fz-sm(size)
  +sm()
    fz(size)
fz-md(size)
  +md()
    fz(size)
fz-lg(size)
  +lg()
    fz(size)

h(h = auto)
  height autoUnit(h)
h-xs(h = auto)
  +xs()
    h(h)
h-sm(h = auto)
  +sm()
    h(h)
h-md(h = auto)
  +md()
    h(h)
h-lg(h = auto)
  +lg()
    h(h)

l(val = auto)
  left autoUnit(val)
l-xs(val = auto)
  +xs()
    l(val)
l-sm(val = auto)
  +sm()
    l(val)
l-md(val = auto)
  +md()
    l(val)
l-lg(val = auto)
  +lg()
    l(val)

ls(space)
  letter-spacing space
ls-xs(space)
  +xs()
    ls(space)
ls-sm(space)
  +sm()
    ls(space)
ls-md(space)
  +md()
    ls(space)
ls-lg(space)
  +lg()
    ls(space)

lh(height)
  line-height height
lh-xs(height)
  +xs()
    lh(height)
lh-sm(height)
  +sm()
    lh(height)
lh-md(height)
  +md()
    lh(height)
lh-lg(height)
  +lg()
    lh(height)

mb(val = auto)
  margin-bottom autoUnit(val)
mb-xs(val = auto)
  +xs()
    mb(val)
mb-sm(val = auto)
  +sm()
    mb(val)
mb-md(val = auto)
  +md()
    mb(val)
mb-lg(val = auto)
  +lg()
    mb(val)

ml(val = auto)
  margin-left autoUnit(val)
ml-xs(val = auto)
  +xs()
    ml(val)
ml-sm(val = auto)
  +sm()
    ml(val)
ml-md(val = auto)
  +md()
    ml(val)
ml-lg(val = auto)
  +lg()
    ml(val)

mr(val = auto)
  margin-right autoUnit(val)
mr-xs(val = auto)
  +xs()
    mr(val)
mr-sm(val = auto)
  +sm()
    mr(val)
mr-md(val = auto)
  +md()
    mr(val)
mr-lg(val = auto)
  +lg()
    mr(val)

mt(val = auto)
  margin-top autoUnit(val)
mt-xs(val = auto)
  +xs()
    mt(val)
mt-sm(val = auto)
  +sm()
    mt(val)
mt-md(val = auto)
  +md()
    mt(val)
mt-lg(val = auto)
  +lg()
    mt(val)

m()
  if arguments
    margin autoUnit(arguments)
  else
    margin auto
m-xs()
  +xs()
    m(arguments)
m-sm()
  +sm()
    m(arguments)
m-md()
  +md()
    m(arguments)
m-lg()
  +lg()
    m(arguments)

pb(val)
  padding-bottom autoUnit(val)
pb-xs(val)
  +xs()
    pb(val)
pb-sm(val)
  +sm()
    pb(val)
pb-md(val)
  +md()
    pb(val)
pb-lg(val)
  +lg()
    pb(val)

pl(val)
  padding-left autoUnit(val)
pl-xs(val)
  +xs()
    pl(val)
pl-sm(val)
  +sm()
    pl(val)
pl-md(val)
  +md()
    pl(val)
pl-lg(val)
  +lg()
    pl(val)

pr(val)
  padding-right autoUnit(val)
pr-xs(val)
  +xs()
    pr(val)
pr-sm(val)
  +sm()
    pr(val)
pr-md(val)
  +md()
    pr(val)
pr-lg(val)
  +lg()
    pr(val)

pt(val)
  padding-top autoUnit(val)
pt-xs(val)
  +xs()
    pt(val)
pt-sm(val)
  +sm()
    pt(val)
pt-md(val)
  +md()
    pt(val)
pt-lg(val)
  +lg()
    pt(val)

p()
  padding autoUnit(arguments)
p-xs()
  +xs()
    p(arguments)
p-sm()
  +sm()
    p(arguments)
p-md()
  +md()
    p(arguments)
p-lg()
  +lg()
    p(arguments)

r(val = auto)
  right autoUnit(val)
r-xs(val = auto)
  +xs()
    r(val)
r-sm(val = auto)
  +sm()
    r(val)
r-md(val = auto)
  +md()
    r(val)
r-lg(val = auto)
  +lg()
    r(val)

tac()
  text-align center
tac-xs()
  +xs()
    tac()
tac-sm()
  +sm()
    tac()
tac-md()
  +md()
    tac()
tac-lg()
  +lg()
    tac()

tal()
  text-align left
tal-xs()
  +xs()
    tal()
tal-sm()
  +sm()
    tal()
tal-md()
  +md()
    tal()
tal-lg()
  +lg()
    tal()

tar()
  text-align right
tar-xs()
  +xs()
    tar()
tar-sm()
  +sm()
    tar()
tar-md()
  +md()
    tar()
tar-lg()
  +lg()
    tar()

t(val = auto)
  top autoUnit(val)
t-xs(val = auto)
  +xs()
    t(val)
t-sm(val = auto)
  +sm()
    t(val)
t-md(val = auto)
  +md()
    t(val)
t-lg(val = auto)
  +lg()
    t(val)

w(w = auto)
  width autoUnit(w)
w-xs(w = auto)
  +xs()
    w(w)
w-sm(w = auto)
  +sm()
    w(w)
w-md(w = auto)
  +md()
    w(w)
w-lg(w = auto)
  +lg()
    w(w)

bg(x = 50%, y = x)
  background-color transparent
  background-repeat no-repeat
  background-position x y

br-medias()
  br
    &.br-lg
    &.br-md
    &.br-sm
    &.br-xs
      dn()
    &.br-lg
      db-lg()
    &.br-md
      db-md()
    &.br-sm
      db-sm()
    &.br-xs
      db-xs()

cf()
  &:after
    content " "
    display block
    clear both

ellips()
  overflow hidden
  text-overflow ellipsis
  white-space nowrap

font-goth()
  font-family -apple-system, BlinkMacSystemFont, 'Hiragino Kaku Gothic ProN', '游ゴシック  Medium', meiryo, sans-serif

font-min()
  font-family "游明朝", YuMincho, "ヒラギノ明朝 ProN W3", "Hiragino Mincho ProN", "HG明朝E", "ＭＳ Ｐ明朝", "ＭＳ 明朝", serif

justify()
  text-align justify
  text-justify inter-ideograph

sz(w = auto, h = w)
  width autoUnit(w)
  height autoUnit(h)
sz-xs(w = auto, h = w)
  +xs()
    sz(w, h)
sz-sm(w = auto, h = w)
  +sm()
    sz(w, h)
sz-md(w = auto, h = w)
  +md()
    sz(w, h)
sz-lg(w = auto, h = w)
  +lg()
    sz(w, h)

stroked(width, color)
  x = 0
  y = 0
  bufX = 0
  bufY = 0
  buf = ''
  for i in (0...36)
    x = floor(width * sin(i * 10deg))
    y = floor(width * cos(i * 10deg))
    unless (x == bufX) && (y == bufY)
      buf += ', ' unless i == 0
      buf += join(' ', x y '1px' color)
    bufX = x
    bufY = y
  text-shadow unquote(buf)

text-hidden()
  text-indent 100%
  white-space nowrap
  overflow hidden

trbl0()
  position absolute
  margin auto
  top 0
  right 0
  bottom 0
  left 0

triangle(color, forward = u, base, d)
  width 0
  height 0
  border-style solid
  w = round(base / 2)
  h = round(w / tan((d / 2)deg))
  if forward == d
    border-width (h)px (w)px 0
    border-color color transparent transparent
  else if forward == r
    border-width (w)px 0 (w)px (h)px
    border-color transparent transparent transparent color
  else if forward == l
    border-width (w)px (h)px (w)px 0
    border-color transparent color transparent transparent
  else
    border-width 0 (w)px (h)px (w)px
    border-color transparent transparent color
